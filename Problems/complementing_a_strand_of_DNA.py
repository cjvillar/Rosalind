"""
https://rosalind.info/problems/revc/

Problem
In DNA strings, symbols 'A' and 'T' are complements of each other, as are 'C' and 'G'.

The reverse complement of a DNA string s is the string sc formed by reversing the symbols of s, then taking the complement of each symbol (e.g., the reverse complement of "GTCA" is "TGAC").

Given: A DNA string s of length at most 1000 bp.

Return: The reverse complement sc of s.

Sample Dataset
AAAACCCGGT
Sample Output
ACCGGGTTTT


DATASET:

CATCTCTCATCGCTAACAAGGCCATCCATGCTCGTGCTCGAGAAGTTCAGTAACTAACACCGGAATGGTGACGC
TTTGCGAAGTTGAACCAGGTGAAATAAGTTTCGGAGATACGTTTGGGTGAGGTGAGTTCAGATTCACGGCGTCGT
AGCCCGAGCTGCTGCGTTGAAGTCTGTTGTGATACGACGGCCTTCAACCTCCTCGCGCATCATGACTGAGATCCG
CCATCGAGCTGCGGTCGAGGGCCTACTACGCTTTGCGCGTACCTCCCGATAATAAACCTTGTAAGGGGTATTCGA
CCGCAACAGTAGGCCTAATCGTAGCTATTTGGAAGGCTTAGGCGCATGACAATTTACGCTCTAAAGCGGTCGCCG
CGAAAGTCGGTCCCCGTTACCTTATTACCCAGATGTAAATGCAAGGTTACTGGTGACACTGGTAGATGCCGAGAA
TAGCGACCGCAAAACCGCTATTATTGCCGAAATTAGCCGGTTTATCTGAAGTCTTATGGAAGGCCAACGTCCGTA
CGTACTATTTAAGCAGTGGAAAGTGCGGCTGTGTTGGACCCGGGCTCGCAATCCTGGTAGTCCGTGCCAACCCAT
TAAATGGAATTATGTAGGCCAATTGCGGCGGGCAGCCTTGCGTAATAGTCAGGCGGTTAGGTGTCGGAGACGACA
CAGGGGGAGGAGCTCGCTTCTTAAGCGCTCGGGTCAAAGCTGCCGTAGTAAAGATGGGGCACGGGGTCGGAGCTA
AATCTGGACTAGCGAGGCCCCAAGTTATGACTGGGTCTAAGGCGCTCACCAACGAAGAAGCAAGGTTCGAAGATT
ATCACGTAGGGCCGTTATCAGCGAGGACTCCGGGGA

"""

#first attempt, could be improved.
def complement_string(s):
    complement = []
    for dna_nucleotide in list(s):
        if dna_nucleotide.upper() == "G":
            dna_nucleotide = "C"
        elif dna_nucleotide.upper() == "A":
            dna_nucleotide = "T"
        elif dna_nucleotide.upper() == "T":
            dna_nucleotide = "A"
        elif dna_nucleotide.upper() == "C":
            dna_nucleotide = "G"
        complement.append(dna_nucleotide)
    
    return ''.join(complement[::-1])
        
#driver code
s = "CATCTCTCATCGCTAACAAGGCCATCCATGCTCGTGCTCGAGAAGTTCAGTAACTAACACCGGAATGGTGACGCTTTGCGAAGTTGAACCAGGTGAAATAAGTTTCGGAGATACGTTTGGGTGAGGTGAGTTCAGATTCACGGCGTCGTAGCCCGAGCTGCTGCGTTGAAGTCTGTTGTGATACGACGGCCTTCAACCTCCTCGCGCATCATGACTGAGATCCGCCATCGAGCTGCGGTCGAGGGCCTACTACGCTTTGCGCGTACCTCCCGATAATAAACCTTGTAAGGGGTATTCGACCGCAACAGTAGGCCTAATCGTAGCTATTTGGAAGGCTTAGGCGCATGACAATTTACGCTCTAAAGCGGTCGCCGCGAAAGTCGGTCCCCGTTACCTTATTACCCAGATGTAAATGCAAGGTTACTGGTGACACTGGTAGATGCCGAGAATAGCGACCGCAAAACCGCTATTATTGCCGAAATTAGCCGGTTTATCTGAAGTCTTATGGAAGGCCAACGTCCGTACGTACTATTTAAGCAGTGGAAAGTGCGGCTGTGTTGGACCCGGGCTCGCAATCCTGGTAGTCCGTGCCAACCCATTAAATGGAATTATGTAGGCCAATTGCGGCGGGCAGCCTTGCGTAATAGTCAGGCGGTTAGGTGTCGGAGACGACACAGGGGGAGGAGCTCGCTTCTTAAGCGCTCGGGTCAAAGCTGCCGTAGTAAAGATGGGGCACGGGGTCGGAGCTAAATCTGGACTAGCGAGGCCCCAAGTTATGACTGGGTCTAAGGCGCTCACCAACGAAGAAGCAAGGTTCGAAGATTATCACGTAGGGCCGTTATCAGCGAGGACTCCGGGGA"
print(complement_string(s))
